@page "/home"
@using MCServerManager.Services

@implements IDisposable

@inject MinecraftServerService minecraftServerService
@inject ServerStatsService serverStatsService
@inject ConfigValidationService configValidationService
@inject IJSRuntime js
@inject AuthenticationStateProvider authenticationStateProvider

<PageTitle>Home - MCServerManager</PageTitle>

<div class="flex flex-col lg:flex-row gap-4 items-start">
    <div class="card basis-1/3">
        <h5 class="card-header items-baseline">
            @if (isServerOnline)
            {
                <span class="online-dot"></span>
            }
            else
            {
                <span class="offline-dot"></span>
            }
            Stats
        </h5>
        <div class="card-body">
            <div class="flex flex-col gap-2">
                <div class="stat-box">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="left middle bi bi-clock" viewBox="0 0 16 16">
                        <path d="M8 3.5a.5.5 0 0 0-1 0V9a.5.5 0 0 0 .252.434l3.5 2a.5.5 0 0 0 .496-.868L8 8.71V3.5z"/>
                        <path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm7-8A7 7 0 1 1 1 8a7 7 0 0 1 14 0z"/>
                    </svg>
                    <div class="right middle">@(timeSinceServerStart.HasValue ? timeSinceServerStart.Value.ToString(@"hhhh\:mm\:ss") : "N/A")</div>
                </div>
                <div class="stat-box">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="left middle bi bi-people" viewBox="0 0 16 16">
                        <path d="M15 14s1 0 1-1-1-4-5-4-5 3-5 4 1 1 1 1h8zm-7.978-1A.261.261 0 0 1 7 12.996c.001-.264.167-1.03.76-1.72C8.312 10.629 9.282 10 11 10c1.717 0 2.687.63 3.24 1.276.593.69.758 1.457.76 1.72l-.008.002a.274.274 0 0 1-.014.002H7.022zM11 7a2 2 0 1 0 0-4 2 2 0 0 0 0 4zm3-2a3 3 0 1 1-6 0 3 3 0 0 1 6 0zM6.936 9.28a5.88 5.88 0 0 0-1.23-.247A7.35 7.35 0 0 0 5 9c-4 0-5 3-5 4 0 .667.333 1 1 1h4.216A2.238 2.238 0 0 1 5 13c0-1.01.377-2.042 1.09-2.904.243-.294.526-.569.846-.816zM4.92 10A5.493 5.493 0 0 0 4 13H1c0-.26.164-1.03.76-1.724.545-.636 1.492-1.256 3.16-1.275zM1.5 5.5a3 3 0 1 1 6 0 3 3 0 0 1-6 0zm3-2a2 2 0 1 0 0 4 2 2 0 0 0 0-4z"/>
                    </svg>
                    <div class="right middle">@(serverStats.HasValue ? $"{serverStats.Value.CurrentPlayers} / {serverStats.Value.MaxPlayers}" : "N/A")</div>
                </div>
            </div>
        </div>
        <div class="card-footer">
            <div class="flex flex-row gap-2">
                @if (isServerOnline)
                {
                    <button class="btn-blue w-full" disabled>Start</button>
                    <button @onclick="StopServer" class="btn-red w-full">Stop</button>
                }
                else
                {
                    <button @onclick="StartServer" class="btn-blue w-full">Start</button>
                    <button class="btn-red w-full" disabled>Stop</button>
                }
            </div>
        </div>
    </div>
    <div class="shadow-colored bg-slate-700 flex flex-col w-full rounded overflow-hidden basis-2/3">
        <textarea readonly @ref=textAreaRef value="@consoleOutput" class="w-full h-[50em] border-none text-sm bg-slate-800 resize-none focus:outline-none"></textarea>
        <form onsubmit="@SubmitCommand">
            <input class="w-full bg-transparent border-none outline-none focus:shadow-[inset_0_-3px_0_0_rgb(30,41,59)] duration-200" type="text" placeholder="Type command" @bind="@inputCommand">
        </form>
    </div>
</div>

@code {
    private string inputCommand = string.Empty;
    
    private bool isServerOnline;
    private string consoleOutput = string.Empty;
    private ServerStats? serverStats;

    private DateTime? serverStartedTime;
    private TimeSpan? timeSinceServerStart;
    
    private ElementReference textAreaRef;

    private Timer timer;

    private bool shouldScroll;

    [CascadingParameter] 
    public IModalService Modal { get; set; }
    
    protected override void OnInitialized()
    {
        serverStats = serverStatsService.CurrentStats;
        serverStatsService.OnServerStatsUpdate += OnServerStatsUpdate;
        
        isServerOnline = minecraftServerService.IsServerOnline;
        minecraftServerService.OnServerStatusChanged += OnServerStatusChanged;
        minecraftServerService.OnServerConsoleReceived += OnServerConsoleReceived;

        serverStartedTime = minecraftServerService.ServerStartedTime;
        timer = new Timer(Tick, null, 0, 1000);
        
        SetConsoleOutput(minecraftServerService.ConsoleOutput);
    }

    private async void Tick(object? state)
    {
        timeSinceServerStart = null;
        if (serverStartedTime != null) 
        {
            timeSinceServerStart = DateTime.UtcNow - serverStartedTime;
        }

        await InvokeAsync(StateHasChanged);
    }

    private async void OnServerStatsUpdate(object sender, ServerStats? serverStats)
    {
        this.serverStats = serverStats;
        
        await InvokeAsync(StateHasChanged);
    }

    private async void OnServerStatusChanged(object sender, ServerStatusChangedEventArgs args)
    {
        isServerOnline = args.ServerStatus;

        serverStartedTime = null;
        if (isServerOnline) 
        {
            serverStartedTime = args.Time;
        }

        await InvokeAsync(StateHasChanged);
    }
    
    private async void OnServerConsoleReceived(object sender)
    {
        var service = (MinecraftServerService)sender;
        SetConsoleOutput(service.ConsoleOutput);

        await InvokeAsync(StateHasChanged);
    }

    protected override async void OnAfterRender(bool firstRender)
    {
        if (shouldScroll)
        {
            shouldScroll = false;
            
            await js.InvokeVoidAsync("scrollToEnd", textAreaRef);
        }
    }
    
    private void SubmitCommand()
    {
        if (!string.IsNullOrWhiteSpace(inputCommand) && isServerOnline)
        {
            minecraftServerService.SendCommand(inputCommand);
            inputCommand = string.Empty;
        }
    }

    private void SetConsoleOutput(string text)
    {
        consoleOutput = text;
        shouldScroll = true;
    }

    public void StartServer()
    {
        if (!configValidationService.ValidateConfig(out string message)) 
        {
            var parameters = new ModalParameters();
            parameters.Add(nameof(InvalidConfigModal.Message), message);

            Modal.Show<InvalidConfigModal>("Error", parameters);
            return;
        }

        minecraftServerService.StartServer();
    }

    public void StopServer()
    {
        minecraftServerService.StopServer();
    }

    public void Dispose()
    {
        minecraftServerService.OnServerStatusChanged -= OnServerStatusChanged;
        minecraftServerService.OnServerConsoleReceived -= OnServerConsoleReceived;
        serverStatsService.OnServerStatsUpdate -= OnServerStatsUpdate;
        timer.Dispose();
    }
}