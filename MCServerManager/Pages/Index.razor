@page "/"
@using MCServerManager.Services
@using System.Text.RegularExpressions

@implements IDisposable

@inject HardwareStatsService hardwareStatsService
@inject MinecraftServerService minecraftServerService
@inject IJSRuntime js

<PageTitle>Home - MCServerManager</PageTitle>

<div class="flex flex-col lg:flex-row gap-4 items-start">
    <div class="card basis-1/3">
        <h5 class="card-header">
            @if (isServerOnline)
            {
                <span class="online-dot"></span>
            }
            else
            {
                <span class="offline-dot"></span>
            }
            Stats
        </h5>
        <div class="card-body">
            <div class="flex flex-col gap-2">
                <div class="stat-box">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="left middle bi bi-cpu" viewBox="0 0 16 16">
                        <path d="M5 0a.5.5 0 0 1 .5.5V2h1V.5a.5.5 0 0 1 1 0V2h1V.5a.5.5 0 0 1 1 0V2h1V.5a.5.5 0 0 1 1 0V2A2.5 2.5 0 0 1 14 4.5h1.5a.5.5 0 0 1 0 1H14v1h1.5a.5.5 0 0 1 0 1H14v1h1.5a.5.5 0 0 1 0 1H14v1h1.5a.5.5 0 0 1 0 1H14a2.5 2.5 0 0 1-2.5 2.5v1.5a.5.5 0 0 1-1 0V14h-1v1.5a.5.5 0 0 1-1 0V14h-1v1.5a.5.5 0 0 1-1 0V14h-1v1.5a.5.5 0 0 1-1 0V14A2.5 2.5 0 0 1 2 11.5H.5a.5.5 0 0 1 0-1H2v-1H.5a.5.5 0 0 1 0-1H2v-1H.5a.5.5 0 0 1 0-1H2v-1H.5a.5.5 0 0 1 0-1H2A2.5 2.5 0 0 1 4.5 2V.5A.5.5 0 0 1 5 0zm-.5 3A1.5 1.5 0 0 0 3 4.5v7A1.5 1.5 0 0 0 4.5 13h7a1.5 1.5 0 0 0 1.5-1.5v-7A1.5 1.5 0 0 0 11.5 3h-7zM5 6.5A1.5 1.5 0 0 1 6.5 5h3A1.5 1.5 0 0 1 11 6.5v3A1.5 1.5 0 0 1 9.5 11h-3A1.5 1.5 0 0 1 5 9.5v-3zM6.5 6a.5.5 0 0 0-.5.5v3a.5.5 0 0 0 .5.5h3a.5.5 0 0 0 .5-.5v-3a.5.5 0 0 0-.5-.5h-3z"/>
                    </svg>
                    <div class="right middle">@MathF.Round(stats.CpuUsage, 1)%</div>
                </div>
                <div class="stat-box">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="left middle bi bi-device-hdd" viewBox="0 0 16 16">
                        <path d="M12 2.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Zm0 11a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Zm-7.5.5a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1ZM5 2.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0ZM8 8a1 1 0 1 0 0-2 1 1 0 0 0 0 2Z"/>
                        <path d="M12 7a4 4 0 0 1-3.937 4c-.537.813-1.02 1.515-1.181 1.677a1.102 1.102 0 0 1-1.56-1.559c.1-.098.396-.314.795-.588A4 4 0 0 1 8 3a4 4 0 0 1 4 4Zm-1 0a3 3 0 1 0-3.891 2.865c.667-.44 1.396-.91 1.955-1.268.224-.144.483.115.34.34l-.62.96A3.001 3.001 0 0 0 11 7Z"/>
                        <path d="M2 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V2Zm2-1a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H4Z"/>
                    </svg>
                    <div class="right middle">@MathF.Round(stats.StorageUsage, 1) / @MathF.Round(stats.MaxStorage, 1) GB</div>
                </div>
                <div class="stat-box">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="left middle bi bi-memory" viewBox="0 0 16 16">
                        <path d="M1 3a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h4.586a1 1 0 0 0 .707-.293l.353-.353a.5.5 0 0 1 .708 0l.353.353a1 1 0 0 0 .707.293H15a1 1 0 0 0 1-1V4a1 1 0 0 0-1-1H1Zm.5 1h3a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-4a.5.5 0 0 1 .5-.5Zm5 0h3a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-4a.5.5 0 0 1 .5-.5Zm4.5.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-4ZM2 10v2H1v-2h1Zm2 0v2H3v-2h1Zm2 0v2H5v-2h1Zm3 0v2H8v-2h1Zm2 0v2h-1v-2h1Zm2 0v2h-1v-2h1Zm2 0v2h-1v-2h1Z"/>
                    </svg>
                    <div class="right middle">@MathF.Round(stats.MemoryUsage, 1) / @MathF.Round(stats.MaxMemory, 1) GB</div>
                </div>
            </div>
        </div>
        <div class="card-footer">
            <div class="flex flex-row gap-2">
                @if (isServerOnline)
                {
                    <button class="btn-blue w-full" disabled>Start</button>
                }
                else
                {
                    <button @onclick="StartServerAsync" class="btn-blue w-full">Start</button>
                }

                @if (isServerOnline)
                {
                    <button @onclick="StopServerAsync" class="btn-red w-full">Stop</button>
                }
                else
                {
                    <button class="btn-red w-full" disabled>Stop</button>
                }
            </div>
        </div>
    </div>
    <div class="shadow-colored bg-slate-700 flex flex-col w-full rounded overflow-hidden basis-2/3">
        <textarea readonly @ref=textAreaRef value="@consoleOutput" class="w-full h-[50em] border-none text-sm bg-slate-800 resize-none focus:outline-none"></textarea>
        <form onsubmit="@SubmitCommand">
            <input class="w-full bg-transparent border-none outline-none focus:shadow-[inset_0_-3px_0_0_rgb(30,41,59)] duration-200" type="text" placeholder="Type command" @bind="@inputCommand">
        </form>
    </div>
</div>

@code {
    private string inputCommand = string.Empty;
    
    private bool isServerOnline;
    private string consoleOutput;
    private HardwareStats stats;
    private ElementReference textAreaRef;

    private bool shouldScroll = false;
    
    protected override void OnInitialized()
    {
        stats = hardwareStatsService.Stats;
        hardwareStatsService.OnHardwareUpdate += OnHardwareUpdate;

        isServerOnline = minecraftServerService.IsServerOnline;
        minecraftServerService.OnServerStatusChanged += OnServerStatusChanged;
        minecraftServerService.OnServerConsoleReceived += OnServerConsoleReceived;
        
        SetConsoleOutput(minecraftServerService.ConsoleOutput);
    }

    private void SubmitCommand()
    {
        if (!string.IsNullOrWhiteSpace(inputCommand) && isServerOnline)
        {
            minecraftServerService.SendCommand(inputCommand);
            inputCommand = string.Empty;
        }
    }

    private void SetConsoleOutput(string text)
    {
        consoleOutput = string.Join("\n", TakeLastLines(text, 80));
        shouldScroll = true;
    }
    
    private List<string> TakeLastLines(string text, int count)
    {
        List<string> lines = new List<string>();
        Match match = Regex.Match(text, "^.*$", RegexOptions.Multiline | RegexOptions.RightToLeft);

        while (match.Success && lines.Count < count)
        {
            lines.Insert(0, match.Value);
            match = match.NextMatch();
        }

        return lines;
    }

    public void StartServerAsync()
    {
        minecraftServerService.StartServer();
    }

    public void StopServerAsync()
    {
        minecraftServerService.StopServer();
    }

    private async void OnHardwareUpdate(object sender, HardwareUpdateEventArgs eventArgs)
    {
        stats = eventArgs.Stats;

        await InvokeAsync(StateHasChanged);
    }
    
    private async void OnServerStatusChanged(object sender, bool serverStatus)
    {
        isServerOnline = serverStatus;

        await InvokeAsync(StateHasChanged);
    }
    
    private async void OnServerConsoleReceived(object sender)
    {
        var service = (MinecraftServerService)sender;
        SetConsoleOutput(service.ConsoleOutput);

        await InvokeAsync(StateHasChanged);
    }

    protected override async void OnAfterRender(bool firstRender)
    {
        if (shouldScroll)
        {
            shouldScroll = false;
            
            await js.InvokeVoidAsync("scrollToEnd", textAreaRef);
        }
    }

    public void Dispose()
    {
        hardwareStatsService.OnHardwareUpdate -= OnHardwareUpdate;
    }
}